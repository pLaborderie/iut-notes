{"version":3,"sources":["pages/Login.js","pages/Notes/CreateNote.js","router.js","pages/Home.js","pages/Notes/NotesList.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Login","react_default","a","createElement","CreateNote","routes","name","path","exact","component","icon","Sider","styled","Layout","_templateObject","Title","h3","_templateObject2","withRouter","_ref","location","breakpoint","collapsedWidth","menu","theme","mode","style","lineHeight","map","route","Item","key","className","pathname","react_router_dom","to","type","Footer","Content","App","layout","components_Header","minHeight","display","flexDirection","padding","flexGrow","react_router","Object","assign","concat","textAlign","flexShrink","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAUeA,MARf,WACE,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BCKSC,ICLFC,EAAS,CACpB,CAAEC,KAAM,UAAWC,KAAM,IAAKC,OAAO,EAAMC,UCJ7C,WACE,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,+CDAwDO,KAAM,QAClE,CAAEJ,KAAM,eAAgBC,KAAM,SAAUE,UAAWT,EAAOU,KAAM,SAChE,CAAEJ,KAAM,oBAAkBC,KAAM,UAAWE,UAAWT,EAAOU,KAAM,UACnE,CAAEJ,KAAM,aAAcC,KAAM,WAAYE,UAAWT,EAAOU,KAAM,QAChE,CAAEJ,KAAM,QAASC,KAAM,SAAUC,OAAO,EAAMC,UERhD,WACE,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BFKgEO,KAAM,eAC1E,CAAEJ,KAAM,gBAAiBC,KAAM,aAAcE,UDT/C,WACE,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iCCMgEO,KAAM,sbGN5E,IAAMC,EAAQC,YAAOC,IAAOF,MAAdC,CAAHE,KAOLC,EAAQH,IAAOI,GAAVC,KAwCIC,kBA9Bf,SAAAC,GAAsC,IAApBC,EAAoBD,EAApBC,SAAUf,EAAUc,EAAVd,OAC1B,OACEJ,EAAAC,EAAAC,cAACQ,EAAD,CACEU,WAAW,KACXC,eAAe,KAEfrB,EAAAC,EAAAC,cAACY,EAAD,kBAGAd,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACEC,MAAM,OACNC,KAAK,SACLC,MAAO,CAAEC,WAAY,SAEpBtB,EAAOuB,IAAI,SAACC,GAAD,OACV5B,EAAAC,EAAAC,cAACoB,EAAA,EAAKO,KAAN,CACEC,IAAKF,EAAMtB,KACXyB,UAAWZ,EAASa,WAAaJ,EAAMtB,KAAO,yBAA2B,IAEzEN,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAASC,GAAIN,EAAMtB,MAChBsB,EAAMnB,MAAQT,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAM0B,KAAMP,EAAMnB,OACjCT,EAAAC,EAAAC,cAAA,YAAO0B,EAAMvB,cCpCnB+B,EAAoBxB,IAApBwB,OAAQC,EAAYzB,IAAZyB,QAwBDC,MAtBf,WACE,OACEtC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,KACEvC,EAAAC,EAAAC,cAACsC,EAAD,CAAQpC,OAAQA,IAChBJ,EAAAC,EAAAC,cAAA,OAAKuB,MAAO,CAAEgB,UAAW,QAASC,QAAS,OAAQC,cAAe,WAChE3C,EAAAC,EAAAC,cAACmC,EAAD,CAASZ,MAAO,CAAEmB,QAAS,YAAaC,SAAU,IAChD7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,KACG1C,EAAOuB,IAAI,SAAAC,GAAK,OACf5B,EAAAC,EAAAC,cAAC4C,EAAA,EAADC,OAAAC,OAAA,CAAOlB,IAAG,SAAAmB,OAAWrB,EAAMtB,OAAYsB,QAI7C5B,EAAAC,EAAAC,cAACkC,EAAD,CAAQX,MAAO,CAAEyB,UAAW,SAAUC,WAAY,IAAlD,4CCVUC,QACW,cAA7BC,OAAOlC,SAASmC,UAEe,UAA7BD,OAAOlC,SAASmC,UAEhBD,OAAOlC,SAASmC,SAASC,MACvB,2DCXNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5bb2e49c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Login() {\n  return (\n    <div>\n      <h1>Se connecter</h1>\n    </div>\n  )\n}\n\nexport default Login;\n","import React from 'react';\n\nfunction CreateNote() {\n  return (\n    <div>\n      <h1>Créer une note</h1>\n    </div>\n  )\n}\n\nexport default CreateNote;","import Home from \"./pages/Home\";\nimport Login from './pages/Login';\nimport NotesList from \"./pages/Notes/NotesList\";\nimport CreateNote from \"./pages/Notes/CreateNote\";\n\nexport const routes = [\n  { name: 'Accueil', path: '/', exact: true, component: Home, icon: 'home' },\n  { name: 'Se connecter', path: '/login', component: Login, icon: 'login' },\n  { name: 'Se déconnecter', path: '/logout', component: Login, icon: 'logout' },\n  { name: 'Mon compte', path: '/account', component: Login, icon: 'user' },\n  { name: 'Notes', path: '/notes', exact: true, component: NotesList, icon: 'file-search' },\n  { name: 'Nouvelle note', path: '/notes/new', component: CreateNote, icon: 'form' },\n];\n","import React from 'react';\n\nfunction Home() {\n  return (\n    <div>\n      <h1>Bienvenue sur IUT Notes !</h1>\n      <p>Page en cours de construction...</p>\n    </div>\n  )\n}\n\nexport default Home;","import React from 'react';\n\nfunction NotesList() {\n  return (\n    <div>\n      <h1>Liste des notes</h1>\n    </div>\n  )\n}\n\nexport default NotesList;\n","import React from 'react';\nimport { Layout, Menu, Icon } from 'antd';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Sider = styled(Layout.Sider)`\n  @media (max-width: 992px) {\n    position: absolute !important;\n    min-height: 100vh !important;\n  }\n`;\n\nconst Title = styled.h3`\n  height: 32px;\n  color: #FFF;\n  margin: 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction Header({ location, routes }) {\n  return (\n    <Sider\n      breakpoint=\"lg\"\n      collapsedWidth=\"0\"\n    >\n      <Title>\n        IUT Notes\n      </Title>\n      <Menu\n        theme=\"dark\"\n        mode=\"inline\"\n        style={{ lineHeight: '64px' }}\n      >\n        {routes.map((route) => (\n          <Menu.Item\n            key={route.path}\n            className={location.pathname === route.path ? 'ant-menu-item-selected' : ''}\n          >\n            <NavLink to={route.path}>\n              {route.icon && <Icon type={route.icon} />}\n              <span>{route.name}</span>\n            </NavLink>\n          </Menu.Item>\n        ))}\n      </Menu>\n    </Sider>\n  )\n}\n\nexport default withRouter(Header);","import React from 'react';\nimport { Layout } from 'antd';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport { routes } from './router';\nimport Header from './components/Header';\n\nconst { Footer, Content } = Layout;\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Layout>\n        <Header routes={routes} />\n        <div style={{ minHeight: '100vh', display: 'flex', flexDirection: 'column' }}>\n          <Content style={{ padding: '10px 50px', flexGrow: 1 }}>\n            <Switch>\n              {routes.map(route => (\n                <Route key={`route-${route.path}`} {...route} />\n              ))}\n            </Switch>\n          </Content>\n          <Footer style={{ textAlign: 'center', flexShrink: 1 }}>\n            Paul Laborderie - 2019\n          </Footer>\n        </div>\n      </Layout>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}